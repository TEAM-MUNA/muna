@import url("https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@100..900&display=swap");
@import "./variables";
@import "./mixin";

html,
body {
  height: 100%;
  margin: 0;
}

body {
  font-family: "Noto Sans KR", sans-serif;
  font-optical-sizing: none;
  line-height: 1.2;
  background: #ddd;
  overflow: hidden;
}

#root {
  background: $white;
  height: 100%;
  max-width: 480px;
  padding: 0 20px 40px;
  margin: 0 auto;
  border: 1px solid transparent;
  overflow-y: auto;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  font-weight: $font-medium;
  margin: 0;
}

* {
  font-weight: $font-regular;
  box-sizing: border-box;
}

a,
button {
  cursor: pointer;
  padding: 0;
  color: $black;
  text-decoration: none;
}

// reset.css
p {
  margin: 0;
}

input {
  background: none;
  border: none;
  &:focus {
    outline: none;
  }
}

ul,
li {
  margin: 0;
  padding: 0;
  list-style: none;
}

dl,
dd {
  margin: 0;
  padding: 0;
}

.sr_only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip-path: inset(50%);
  border: 0;
  clip: rect(0 0 0 0);
}

.flex {
  display: flex;
}

.flex-column {
  flex-direction: column;
}

.flex-row {
  flex-direction: row;
}

// 카드리스트 공통
ul:has(.card_concert) {
  display: flex;
  flex-direction: column;
  gap: 20px;
  li {
    display: flex;
  }
}
ul:has(.card_poster) {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  flex-wrap: wrap;
  gap: 16px 10px;
  li {
    display: flex;
  }
}
ul:has(.card_review) {
  display: flex;
  flex-direction: column;
  &:has(.page_profile, .page_concert) {
    margin-top: -20px;
  }
  li {
    display: flex;
  }
}
ul:has(.card_review_gallery) {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 2px;
  margin: 0 -20px;
  li {
    display: flex;
  }
}
.wrapper_dropdown_noline {
  display: flex;
  justify-content: flex-end;
  margin: -10px 0 0;
}

// 변수관련 공통스타일
@function get-property($type) {
  @if $type == "text" {
    @return color;
  } @else if $type == "bg" {
    @return background-color;
  } @else if $type == "border" {
    @return border-color;
  } @else if $type == "size" {
    @return font-size;
  } @else if $type == "weight" {
    @return font-weight;
  }
}

$fonts: (
  size: (
    xs: $font-xs,
    sm: $font-sm,
    md: $font-md,
    lg: $font-lg,
    xl: $font-xl,
    2xl: $font-2xl,
    3xl: $font-3xl,
    4xl: $font-4xl,
  ),
  weight: (
    regular: $font-regular,
    bold: $font-bold,
  ),
);

@each $type, $font-map in $fonts {
  @each $size, $value in $font-map {
    .font_#{$size} {
      #{get-property($type)}: $value;
    }
  }
}

$colors: (
  text: (
    black: $black,
    black_light: $black-light,
    black_lighter: $black-lighter,
    white: $white,
    white_light: $white-light,
    white_lighter: $white-lighter,
    primary: $primary,
    primary_light: $primary-light,
    danger: $danger,
    danger_light: $danger-light,
  ),
  bg: (
    box_base: $box-base,
    box_light: $box-light,
  ),
  border: (
    line_light: $line-light,
    line_lighter: $line-lighter,
  ),
);

@each $type, $color-map in $colors {
  @each $color, $value in $color-map {
    .#{$type}_#{$color} {
      #{get-property($type)}: $value;
    }
  }
}

// // blue
// .card {
//   @include box("circle");
//   background-color: blue;
// }

// // red
// .profile {
//   @include box("rect");
//   background-color: red;
// }
